type Customer {
    id: ID!
    name: String
    mainContact: Contact
    locations: [Location] @hasMany
    contacts: [Contact] @hasMany
    bookings: [Booking] @hasMany
}

extend type Query {
    customers(
        id: ID @eq
        name: String @where(operator: "like")
    ): [Customer!]! @all

    customer(
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    ): Customer @find
}

extend type Mutation {
    deleteCustomer(id: ID!) : Customer @delete
    updateCustomer(input: EditCustomerInput! @spread) : Customer @update
    addNewCustomer(input: AddCustomerInput! @spread) : Customer @create
}

input AddCustomerInput {
    name: String
}

input EditCustomerInput {
    id: ID!
    name: String
    mainContact: Contact
    locations: AddLocationsHasMany @hasMany
    contacts: AddContactsHasMany @hasMany
    bookings: AddBookinsHasMany @hasMany
}

input AddMainContact {
    connect: ID
}

input AddLocationsHasMany {
     sync: [ID]
}

input AddContactsHasMany {
    sync: [ID]
}

input AddBookinsHasMany {
    sync: [ID]
}

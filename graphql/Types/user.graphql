type User {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  created_at: DateTime!
  updated_at: DateTime!
  roles: [Role] @hasMany
  permissions: Permission
}

extend type Query {
  user(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
  ): User @find

  users(
    name: String @where(operator: "like")
  ): [User!]! @all
}

extend type Mutation {
  deleteUser(id: ID!) : User @delete
  addNewUser(input: UserInput! @spread) : User @create
  updateUser(input: EditUserInput! @spread) : User @update
}

input UserInput {
  name: String
  email: String
  password: String @hash
  roles: AddUserRolesHasOne @hasMany
}

input EditUserInput {
  id: ID!
  name: String
  email: String
  roles: AddUserRolesHasOne @hasMany
}

input AddUserRolesHasOne {
  sync: [ID]
}
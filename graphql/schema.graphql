scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

# Queries
type Query {
  user(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
  ): User @find

  users(
    name: String @where(operator: "like")
  ): [User!]! @all

  vehicles: [Vehicle!]! @all

  locations: [Location!]! @all

  customers(
    id: ID @eq
    name: String @where(operator: "like")
  ): [Customer!]! @all

  customer(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
  ): Customer @find

  contact(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
  ): Contact @find
}

# Mutations

type Mutation {
  deleteUser(id: ID!) : User @delete
  deleteLocation(id: ID!) : Location @delete
  deleteVehicle(id: ID!) : Vehicle @delete
  deleteCustomer(id: ID!) : Customer @delete
  deleteContact(id: ID!) : Contact @delete

  addNewUser(
    name: String!,
    email: String!,
    password: String! @hash
  ) : User @create

  updateUser(
    id: ID!,
    name: String,
    email: String
  ) : User @update

  updateCustomer(
    id: ID!,
    name: String
  ) : Customer @update

  updateVehicle(
    id: ID!
    title: String,
    registration: String,
    loadWeight: String,
    liftWeight: String,
    wofExpiry: Date,
    registrationExpiry: Date,
    isActive: Boolean
  ) : Vehicle @update

  addNewLocation(
    unitNumber: String,
    streetNumber: String,
    streetName: String,
    suburb: String,
    city: String,
    customer_id: ID
  ) : Location @create

  addNewVehicle(
    title: String,
    registration: String,
    loadWeight: String,
    liftWeight: String,
    wofExpiry: Date,
    registrationExpiry: Date,
    isActive: Boolean
  ) : Vehicle @create

  addNewContact(
    firstName: String,
    lastName: String,
    phoneNumber: String,
    emailAddress: String,
    customer_id: ID!
  ) : Contact @create

  addNewCustomer(
    name: String
    mainContact: Contact
  ) : Customer @create
}

# Types
type User {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}

type Contact {
  id: ID!
  firstName: String
  lastName: String
  phoneNumber: String
  emailAddress: String
  customer: Customer
}

type Customer {
  id: ID!
  name: String
  mainContact: Contact
  locations: [Location] @hasMany
  contacts: [Contact] @hasMany
}

type Location {
  id: ID!
  unitNumber: String
  streetNumber: String
  streetName: String
  suburb: String
  city: String
  customer: Customer @belongsTo
}

type Vehicle {
  id: ID!
  title: String
  registration: String
  loadWeight: String
  liftWeight: String
  wofExpiry: Date
  registrationExpiry: Date
  isActive: Boolean
}
